{"version":3,"sources":["src/common.speech/DialogConnectorFactory.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EACH,SAAS,EACT,mBAAmB,GACtB,MAAM,2BAA2B,CAAC;AAEnC,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAA8B,yBAAyB,EAAE,MAAM,WAAW,CAAC;AAClF,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,MAAM,OAAO,GAAW,6BAA6B,CAAC;AAQtD,MAAM,YAAY,GAAmB;IACjC,UAAU,EAAE,cAAc;IAC1B,YAAY,EAAE,EAAE;IAChB,OAAO,EAAE,IAAI;CAChB,CAAC;AAEF,MAAM,cAAc,GAAmB;IACnC,UAAU,EAAE,iBAAiB;IAC7B,YAAY,EAAE,UAAU;IACxB,OAAO,EAAE,IAAI;CAChB,CAAC;AAEF,MAAM,UAAU,GAAW,KAAK,CAAC;AAEjC,SAAS,uBAAuB,CAAC,UAAkB;IAC/C,QAAQ,UAAU,EAAE;QAChB,KAAK,iBAAiB,CAAC,CAAC;YACpB,OAAO,cAAc,CAAC;SACzB;QACD,KAAK,eAAe,CAAC,CAAC;YAClB,OAAO,YAAY,CAAC;SACvB;KACJ;IACD,MAAM,IAAI,KAAK,CAAC,wBAAwB,UAAU,GAAG,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,OAAO,uBAAwB,SAAQ,qBAAqB;IAAlE;;QAEW,WAAM,GAAG,CACZ,MAAwB,EACxB,QAAkB,EAClB,YAAqB,EAAe,EAAE;YAEtC,MAAM,aAAa,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;YACvG,MAAM,UAAU,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;YAC7F,MAAM,MAAM,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;YAEhG,MAAM,QAAQ,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,oCAAoC,EAAE,OAAO,CAAC,CAAC;YAEjH,MAAM,WAAW,GAA8B,EAAE,CAAC;YAClD,WAAW,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,GAAG,QAAQ,CAAC;YAE9D,MAAM,EAAC,YAAY,EAAE,OAAO,EAAE,UAAU,EAAC,GAAG,uBAAuB,CAAC,UAAU,CAAC,CAAC;YAEhF,MAAM,OAAO,GAA8B,EAAE,CAAC;YAC9C,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;YAC9C,OAAO,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,GAAG,YAAY,CAAC;YAE/D,IAAI,QAAgB,CAAC;YACrB,oDAAoD;YACpD,IAAI,aAAa,KAAK,EAAE,EAAE;gBACtB,QAAQ,GAAG,SAAS,MAAM,IAAI,OAAO,IAAI,UAAU,IAAI,OAAO,EAAE,CAAC;aACpE;iBAAM;gBACH,QAAQ,GAAG,SAAS,MAAM,IAAI,OAAO,IAAI,YAAY,IAAI,UAAU,IAAI,OAAO,EAAE,CAAC;gBACjF,OAAO,CAAC,UAAU,CAAC,GAAG,aAAa,CAAC;aACvC;YAED,OAAO,IAAI,mBAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,yBAAyB,EAAE,EAAE,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,CAAC;QAC1J,CAAC,CAAA;IACL,CAAC;CAAA","file":"DialogConnectorFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nconst baseUrl: string = \"convai.speech.microsoft.com\";\r\n\r\ninterface IBackendValues {\r\n    authHeader: string;\r\n    resourcePath: string;\r\n    version: string;\r\n}\r\n\r\nconst botFramework: IBackendValues = {\r\n    authHeader: \"X-DLS-Secret\",\r\n    resourcePath: \"\",\r\n    version: \"v3\"\r\n};\r\n\r\nconst speechCommands: IBackendValues = {\r\n    authHeader: \"X-CommandsAppId\",\r\n    resourcePath: \"commands\",\r\n    version: \"v1\"\r\n};\r\n\r\nconst pathSuffix: string = \"api\";\r\n\r\nfunction getDialogSpecificValues(dialogType: string): IBackendValues {\r\n    switch (dialogType) {\r\n        case \"speech_commands\": {\r\n            return speechCommands;\r\n        }\r\n        case \"bot_framework\": {\r\n            return botFramework;\r\n        }\r\n    }\r\n    throw new Error(`Invalid dialog type '${dialogType}'`);\r\n}\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[QueryParameterNames.LanguageParamName] = language;\r\n\r\n        const {resourcePath, version, authHeader} = getDialogSpecificValues(dialogType);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[authInfo.headerName] = authInfo.token;\r\n        headers[QueryParameterNames.ConnectionIdHeader] = connectionId;\r\n\r\n        let endpoint: string;\r\n        // ApplicationId is only required for CustomCommands\r\n        if (applicationId === \"\") {\r\n            endpoint = `wss://${region}.${baseUrl}/${pathSuffix}/${version}`;\r\n        } else {\r\n            endpoint = `wss://${region}.${baseUrl}/${resourcePath}/${pathSuffix}/${version}`;\r\n            headers[authHeader] = applicationId;\r\n        }\r\n\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), connectionId);\r\n    }\r\n}\r\n"]}