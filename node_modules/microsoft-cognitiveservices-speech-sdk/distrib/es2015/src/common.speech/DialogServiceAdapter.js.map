{"version":3,"sources":["src/common.speech/DialogServiceAdapter.ts"],"names":[],"mappings":"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","file":"DialogServiceAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IStreamChunk,\r\n    MessageType,\r\n    Promise,\r\n    PromiseHelper,\r\n    PromiseResult,\r\n} from \"../common/Exports\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    AudioOutputStream,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    RequestSession,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n    private privDialogConnectionFactory: IConnectionFactory;\r\n    private privDialogAuthFetchEventId: string;\r\n    private privDialogIsDisposed: boolean;\r\n    private privDialogAuthentication: IAuthentication;\r\n    private privDialogAudioSource: IAudioSource;\r\n    private privDialogRequestSession: RequestSession;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchDialogConnection instead.\r\n    private privConnectionConfigPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchDialogConnection instead.\r\n    private privDialogConnectionPromise: Promise<IConnection>;\r\n\r\n    private privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    private privConnectionLoop: Promise<IConnection>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.privDialogAuthentication = authentication;\r\n        this.receiveMessageOverride = this.receiveDialogMessageOverride;\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride = this.listenOnce;\r\n        this.connectImplOverride = this.dialogConnectImpl;\r\n        this.configConnectionOverride = this.configConnection;\r\n        this.fetchConnectionOverride = this.fetchDialogConnection;\r\n        this.disconnectOverride = this.privDisconnect;\r\n        this.privDialogAudioSource = audioSource;\r\n        this.privDialogRequestSession = new RequestSession(audioSource.id());\r\n        this.privDialogConnectionFactory = connectionFactory;\r\n        this.privDialogIsDisposed = false;\r\n        this.agentConfigSent = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privDialogIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        this.privDialogIsDisposed = true;\r\n        if (this.privConnectionConfigPromise) {\r\n            this.privConnectionConfigPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose(reason);\r\n            });\r\n        }\r\n    }\r\n\r\n    public sendMessage = (message: string): void => {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            messagePayload: message,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n\r\n        this.fetchDialogConnection().onSuccessContinueWith((connection: IConnection) => {\r\n            connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent\",\r\n                requestId,\r\n                \"application/json\",\r\n                agentMessageJson));\r\n        });\r\n    }\r\n\r\n    protected privDisconnect(): void {\r\n        this.cancelRecognition(this.privDialogRequestSession.sessionId,\r\n            this.privDialogRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\",\r\n            undefined);\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        if (this.privDialogConnectionPromise.result().isCompleted) {\r\n            if (!this.privDialogConnectionPromise.result().isError) {\r\n                this.privDialogConnectionPromise.result().result.dispose();\r\n                this.privDialogConnectionPromise = null;\r\n            }\r\n        } else {\r\n            this.privDialogConnectionPromise.onSuccessContinueWith((connection: IConnection) => {\r\n                connection.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): void {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privDialogRequestSession.onPhraseRecognized(this.privDialogRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(args.result);\r\n                        } catch (e) {\r\n                            if (!!errorCallBack) {\r\n                                errorCallBack(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        errorCallBack = undefined;\r\n                    }\r\n                }\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privDialogRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privDialogRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privDialogRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privDialogRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    const responseRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(connectionMessage.textBody);\r\n                    const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                    // update the conversation Id\r\n                    if (activityPayload.conversationId) {\r\n                        const updateAgentConfig = this.agentConfig.get();\r\n                        updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                        this.agentConfig.set(updateAgentConfig);\r\n                    }\r\n\r\n                    const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(activityPayload);\r\n                    const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                    if (!!this.privDialogServiceConnector.activityReceived) {\r\n                        try {\r\n                            this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string,\r\n        cancelRecoCallback: (e: SpeechRecognitionResult) => void): void {\r\n\r\n            this.terminateMessageLoop = true;\r\n\r\n            if (!!this.privDialogRequestSession.isRecognizing) {\r\n                this.privDialogRequestSession.onStopRecognizing();\r\n            }\r\n\r\n            if (!!this.privDialogServiceConnector.canceled) {\r\n                const properties: PropertyCollection = new PropertyCollection();\r\n                properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n                const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                    cancellationReason,\r\n                    error,\r\n                    errorCode,\r\n                    undefined,\r\n                    sessionId);\r\n\r\n                try {\r\n                    this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                    /* tslint:disable:no-empty */\r\n                } catch { }\r\n\r\n                if (!!cancelRecoCallback) {\r\n                    const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                        undefined, // ResultId\r\n                        ResultReason.Canceled,\r\n                        undefined, // Text\r\n                        undefined, // Druation\r\n                        undefined, // Offset\r\n                        error,\r\n                        undefined, // Json\r\n                        properties);\r\n                    try {\r\n                        cancelRecoCallback(result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch { }\r\n                }\r\n            }\r\n    }\r\n\r\n    protected listenOnce = (\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n        ): any => {\r\n            this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n            this.privDialogRequestSession.startNewRecognition();\r\n            this.privDialogRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n            // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n            this.dialogConnectImpl();\r\n\r\n            this.sendPreAudioMessages();\r\n\r\n            this.privSuccessCallback = successCallback;\r\n\r\n            return this.privDialogAudioSource\r\n                .attach(this.privDialogRequestSession.audioNodeId)\r\n                .continueWithPromise<boolean>((result: PromiseResult<IAudioStreamNode>) => {\r\n                    let audioNode: ReplayableAudioNode;\r\n\r\n                    if (result.isError) {\r\n                        this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, result.error, successCallback);\r\n                        return PromiseHelper.fromError<boolean>(result.error);\r\n                    } else {\r\n                        audioNode = new ReplayableAudioNode(result.result, this.privDialogAudioSource.format as AudioStreamFormatImpl);\r\n                        this.privDialogRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n                    }\r\n\r\n                    return this.privDialogAudioSource.deviceInfo.onSuccessContinueWithPromise<boolean>((deviceInfo: ISpeechConfigAudioDevice): Promise<boolean> => {\r\n                        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n                        return this.configConnection()\r\n                            .on((_: IConnection) => {\r\n                                const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privDialogRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.sessionStarted) {\r\n                                    this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n                                }\r\n\r\n                                const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n                                // /* tslint:disable:no-empty */\r\n                                audioSendPromise.on((_: boolean) => { /*add? return true;*/ }, (error: string) => {\r\n                                    this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, successCallback);\r\n                                });\r\n\r\n                            }, (error: string) => {\r\n                                this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error, successCallback);\r\n                            }).continueWithPromise<boolean>((result: PromiseResult<IConnection>): Promise<boolean> => {\r\n                                if (result.isError) {\r\n                                    return PromiseHelper.fromError(result.error);\r\n                                } else {\r\n                                    return PromiseHelper.fromResult<boolean>(true);\r\n                                }\r\n                            });\r\n                    });\r\n                });\r\n        }\r\n\r\n        protected sendAudio = (\r\n            audioStreamNode: IAudioStreamNode): Promise<boolean> => {\r\n            // NOTE: Home-baked promises crash ios safari during the invocation\r\n            // of the error callback chain (looks like the recursion is way too deep, and\r\n            // it blows up the stack). The following construct is a stop-gap that does not\r\n            // bubble the error up the callback chain and hence circumvents this problem.\r\n            // TODO: rewrite with ES6 promises.\r\n            const deferred = new Deferred<boolean>();\r\n\r\n            // The time we last sent data to the service.\r\n            let nextSendTime: number = Date.now();\r\n\r\n            const audioFormat: AudioStreamFormatImpl = this.privDialogAudioSource.format as AudioStreamFormatImpl;\r\n\r\n            // Max amount to send before we start to throttle\r\n            const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n            const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n            const startRecogNumber: number = this.privDialogRequestSession.recogNumber;\r\n\r\n            const readAndUploadCycle = () => {\r\n\r\n                // If speech is done, stop sending audio.\r\n                if (!this.privDialogIsDisposed &&\r\n                    !this.privDialogRequestSession.isSpeechEnded &&\r\n                    this.privDialogRequestSession.isRecognizing &&\r\n                    this.privDialogRequestSession.recogNumber === startRecogNumber) {\r\n                    this.fetchDialogConnection().on((connection: IConnection) => {\r\n                        audioStreamNode.read().on(\r\n                            (audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                                // we have a new audio chunk to upload.\r\n                                if (this.privDialogRequestSession.isSpeechEnded) {\r\n                                    // If service already recognized audio end then don't send any more audio\r\n                                    deferred.resolve(true);\r\n                                    return;\r\n                                }\r\n\r\n                                let payload: ArrayBuffer;\r\n                                let sendDelay: number;\r\n\r\n                                if (audioStreamChunk.isEnd) {\r\n                                    payload = null;\r\n                                    sendDelay = 0;\r\n                                } else {\r\n                                    payload = audioStreamChunk.buffer;\r\n                                    this.privDialogRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                                    if (maxSendUnthrottledBytes >= this.privDialogRequestSession.bytesSent) {\r\n                                        sendDelay = 0;\r\n                                    } else {\r\n                                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                                    }\r\n                                }\r\n\r\n                                // Are we ready to send, or need we delay more?\r\n                                setTimeout(() => {\r\n                                    if (payload !== null) {\r\n                                        nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                                    }\r\n\r\n                                    const uploaded: Promise<boolean> = connection.send(\r\n                                        new SpeechConnectionMessage(\r\n                                            MessageType.Binary, \"audio\", this.privDialogRequestSession.requestId, null, payload));\r\n\r\n                                    if (!audioStreamChunk.isEnd) {\r\n                                        uploaded.continueWith((_: PromiseResult<boolean>) => {\r\n\r\n                                            // Regardless of success or failure, schedule the next upload.\r\n                                            // If the underlying connection was broken, the next cycle will\r\n                                            // get a new connection and re-transmit missing audio automatically.\r\n                                            readAndUploadCycle();\r\n                                        });\r\n                                    } else {\r\n                                        // the audio stream has been closed, no need to schedule next\r\n                                        // read-upload cycle.\r\n                                        this.privDialogRequestSession.onSpeechEnded();\r\n                                        deferred.resolve(true);\r\n                                    }\r\n                                }, sendDelay);\r\n                            },\r\n                            (error: string) => {\r\n                                if (this.privDialogRequestSession.isSpeechEnded) {\r\n                                    // For whatever reason, Reject is used to remove queue subscribers inside\r\n                                    // the Queue.DrainAndDispose invoked from DetachAudioNode down below, which\r\n                                    // means that sometimes things can be rejected in normal circumstances, without\r\n                                    // any errors.\r\n                                    deferred.resolve(true); // TODO: remove the argument, it's is completely meaningless.\r\n                                } else {\r\n                                    // Only reject, if there was a proper error.\r\n                                    deferred.reject(error);\r\n                                }\r\n                            });\r\n                    }, (error: string) => {\r\n                        deferred.reject(error);\r\n                    });\r\n                }\r\n            };\r\n\r\n            readAndUploadCycle();\r\n\r\n            return deferred.promise();\r\n        }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privDialogConnectionPromise) {\r\n            if (this.privDialogConnectionPromise.result().isCompleted &&\r\n                (this.privDialogConnectionPromise.result().isError\r\n                    || this.privDialogConnectionPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n                this.agentConfigSent = false;\r\n                this.privDialogConnectionPromise = null;\r\n            } else {\r\n                return this.privDialogConnectionPromise;\r\n            }\r\n        }\r\n\r\n        this.privDialogAuthFetchEventId = createNoDashGuid();\r\n\r\n        // keep the connectionId for reconnect events\r\n        if (this.privConnectionId === undefined) {\r\n            this.privConnectionId = createNoDashGuid();\r\n        }\r\n\r\n        this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privDialogAuthentication.fetchOnExpiry(this.privDialogAuthFetchEventId) : this.privDialogAuthentication.fetch(this.privDialogAuthFetchEventId);\r\n\r\n        this.privDialogConnectionPromise = authPromise\r\n            .continueWithPromise((result: PromiseResult<AuthInfo>) => {\r\n                if (result.isError) {\r\n                    this.privDialogRequestSession.onAuthCompleted(true, result.error);\r\n                    throw new Error(result.error);\r\n                } else {\r\n                    this.privDialogRequestSession.onAuthCompleted(false);\r\n                }\r\n\r\n                const connection: IConnection = this.privDialogConnectionFactory.create(this.privRecognizerConfig, result.result, this.privConnectionId);\r\n\r\n                this.privDialogRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n                // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n                // it'll stop sending events.\r\n                connection.events.attach((event: ConnectionEvent) => {\r\n                    this.connectionEvents.onEvent(event);\r\n                });\r\n\r\n                return connection.open().onSuccessContinueWithPromise((response: ConnectionOpenResponse): Promise<IConnection> => {\r\n                    if (response.statusCode === 200) {\r\n                        this.privDialogRequestSession.onPreConnectionStart(this.privDialogAuthFetchEventId, this.privConnectionId);\r\n                        this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n\r\n                        return PromiseHelper.fromResult<IConnection>(connection);\r\n                    } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                        return this.dialogConnectImpl(true);\r\n                    } else {\r\n                        this.privDialogRequestSession.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                        return PromiseHelper.fromError<IConnection>(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n                    }\r\n                });\r\n            });\r\n\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return this.privDialogConnectionPromise;\r\n    }\r\n\r\n    private receiveDialogMessageOverride = (\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void\r\n        ): Promise<IConnection> => {\r\n\r\n            // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n            const communicationCustodian: Deferred<IConnection> = new Deferred<IConnection>();\r\n\r\n            this.fetchDialogConnection().on((connection: IConnection): Promise<IConnection> => {\r\n                return connection.read()\r\n                    .onSuccessContinueWithPromise((message: ConnectionMessage): Promise<IConnection> => {\r\n                        const isDisposed: boolean = this.isDisposed();\r\n                        const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                        if (isDisposed || terminateMessageLoop) {\r\n                            // We're done.\r\n                            communicationCustodian.resolve(undefined);\r\n                            return PromiseHelper.fromResult<IConnection>(undefined);\r\n                        }\r\n\r\n                        if (!message) {\r\n                            return this.receiveDialogMessageOverride();\r\n                        }\r\n\r\n                        const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                        switch (connectionMessage.path.toLowerCase()) {\r\n                            case \"turn.start\":\r\n                                {\r\n                                    const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                                    const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase();\r\n\r\n                                    // turn started by the service\r\n                                    if (turnRequestId !== audioSessionReqId) {\r\n                                        this.privTurnStateManager.StartTurn(turnRequestId);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case \"speech.startdetected\":\r\n                                const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                                const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privDialogRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechStartDetected) {\r\n                                    this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                                }\r\n\r\n                                break;\r\n                            case \"speech.enddetected\":\r\n\r\n                                let json: string;\r\n\r\n                                if (connectionMessage.textBody.length > 0) {\r\n                                    json = connectionMessage.textBody;\r\n                                } else {\r\n                                    // If the request was empty, the JSON returned is empty.\r\n                                    json = \"{ Offset: 0 }\";\r\n                                }\r\n\r\n                                const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                                this.privDialogRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset);\r\n\r\n                                const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privDialogRequestSession.currentTurnAudioOffset, this.privDialogRequestSession.sessionId);\r\n\r\n                                if (!!this.privRecognizer.speechEndDetected) {\r\n                                    this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                                }\r\n                                break;\r\n\r\n                            case \"turn.end\":\r\n                                {\r\n                                    const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                                    const audioSessionReqId = this.privDialogRequestSession.requestId.toUpperCase();\r\n\r\n                                    // turn started by the service\r\n                                    if (turnEndRequestId !== audioSessionReqId) {\r\n                                        this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                                    } else {\r\n                                        // Audio session turn\r\n\r\n                                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privDialogRequestSession.sessionId);\r\n                                        this.privDialogRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                        if (this.privDialogRequestSession.isSpeechEnded) {\r\n                                            if (!!this.privRecognizer.sessionStopped) {\r\n                                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n\r\n                            default:\r\n                                this.processTypeSpecificMessages(\r\n                                    connectionMessage,\r\n                                    successCallback,\r\n                                    errorCallBack);\r\n                        }\r\n\r\n                        return this.receiveDialogMessageOverride();\r\n                });\r\n            }, (error: string) => {\r\n                this.terminateMessageLoop = true;\r\n            });\r\n\r\n            return communicationCustodian.promise();\r\n        }\r\n\r\n    private startMessageLoop(): Promise<IConnection> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveDialogMessageOverride();\r\n\r\n        return messageRetrievalPromise.on((r: IConnection) => {\r\n            return true;\r\n        }, (error: string) => {\r\n            this.cancelRecognition(this.privDialogRequestSession.sessionId, this.privDialogRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error, this.privSuccessCallback);\r\n        });\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigPromise) {\r\n            if (this.privConnectionConfigPromise.result().isCompleted &&\r\n                (this.privConnectionConfigPromise.result().isError\r\n                    || this.privConnectionConfigPromise.result().result.state() === ConnectionState.Disconnected)) {\r\n\r\n                this.privConnectionConfigPromise = null;\r\n                return this.configConnection();\r\n            } else {\r\n                return this.privConnectionConfigPromise;\r\n            }\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.dialogConnectImpl().onSuccessContinueWithPromise((connection: IConnection): Promise<IConnection> => {\r\n            return this.sendSpeechServiceConfig(connection, this.privDialogRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize())\r\n                .onSuccessContinueWithPromise((_: boolean) => {\r\n                    return this.sendAgentConfig(connection).onSuccessContinueWith((_: boolean) => {\r\n                        return connection;\r\n                    });\r\n                });\r\n        });\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private fetchDialogConnection = (): Promise<IConnection> => {\r\n        return this.configConnection();\r\n    }\r\n\r\n    private sendPreAudioMessages(): void {\r\n        this.fetchDialogConnection().onSuccessContinueWith((connection: IConnection): void => {\r\n            this.sendAgentContext(connection);\r\n        });\r\n    }\r\n\r\n    private sendAgentConfig = (connection: IConnection): Promise<boolean> => {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privDialogRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return PromiseHelper.fromResult(true);\r\n    }\r\n\r\n    private sendAgentContext = (connection: IConnection): Promise<boolean> => {\r\n        const guid: string = createGuid();\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privDialogRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privDialogRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privDialogRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privDialogRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n}\r\n"]}